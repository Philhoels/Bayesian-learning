# plot data
plot_data2.b = data.frame("G" = G,
"nr" = 1:length(G))
# Histogram
ggplot(data = plot_data2.b) +
ggtitle("Histogram of the posterior distribution of the Gini coefficient") +
geom_histogram(aes(x=G),
colour="black",
fill="white",
bins=30)
# create histogramm
#hist(G)
# plot data
plot_data2.b = data.frame("G" = G,
"nr" = 1:length(G))
# Histogram
ggplot(data = plot_data2.b) +
ggtitle("Histogram of the posterior distribution of the Gini coefficient") +
geom_histogram(aes(x=G),
colour="black",
fill="white",
bins=30)
# create histogramm
#hist(G)
# plot data
plot_data2.b = data.frame("G" = G,
"nr" = 1:length(G))
# Histogram
ggplot(data = plot_data2.b) +
ggtitle("Histogram of the posterior distribution of the Gini coefficient") +
geom_histogram(aes(x=G),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")
# create histogramm
#hist(G)
# plot data
plot_data2.b = data.frame("G" = G,
"nr" = 1:length(G))
# Histogram
ggplot(data = plot_data2.b) +
ggtitle("Histogram of the posterior distribution of the Gini coefficient") +
geom_histogram(aes(x=G, y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")
# create histogramm
#hist(G)
# plot data
plot_data2.b = data.frame("G" = G,
"nr" = 1:length(G))
# Histogram
ggplot(data = plot_data2.b,aes(x=G)) +
ggtitle("Histogram of the posterior distribution of the Gini coefficient") +
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")
# create histogramm
#hist(G)
# plot data
plot_data2.b = data.frame("G" = G,
"nr" = 1:length(G))
# Histogram
ggplot(data = plot_data2.b,aes(x=G)) +
ggtitle("Histogram of the posterior distribution of the Gini coefficient") +
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")+
xlim(c(0,1))
# Method 1:
# calculate the 95% credible(confidence) interval
a =0.025
b = 0.975
CI_0025 = quantile(G, probs = c(a,b))[1]
CI_095 = quantile(G, probs = c(a,b))[2]
# plot density
ggplot(data = plot_data2.b, aes(x = G)) +
ggtitle("95% credible interval of G") +
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept = CI_095)) +
geom_vline(aes(xintercept = CI_0025))+
geom_text(aes(label ="97.5 % interval", x =  CI_095 + 0.05, y = 7.5),size = 3 )+
geom_text(aes(label ="2.5 % interval", x =  CI_0025 -0.025, y = 7.5),size = 3 )
# Method 2:
# Highest Posterior Density (HPD)
# idea 1 - thinking problem it has to be h-line
density_G = density(G)
density_y = density_G$y
density_x = density_G$x
density_df = data.frame(density_x = density_x,
density_y = density_y)
density_y_sum = sum(density_y)
density_y_max =max(density_y)
density_y_max_index = which.max(density_y)
density_y[density_y_max_index]/density_y_sum*100
ci_95 = 91
ci_volum_start = density_y[density_y_max_index]/density_y_sum*100 # volumen at the higest point
ci_volum = ci_volum_start
x_left = (density_y_max_index-1):1
x_right = (density_y_max_index+1):length(density_y)
x_left_point = (density_y_max_index-1)
x_right_point = (density_y_max_index+1)
x_left_volum = 0
x_right_volum = 0
while(ci_volum <= ci_95) {
# calculate the volumen to the left and the right
x_left_volum = density_y[x_left_point]/density_y_sum*100
x_right_volum = density_y[x_right_point]/density_y_sum*100
# move the point to the left and the right
x_left_point = x_left_point -1 # move to the left
x_right_point = x_right_point +1 # move to the right
# update the confidence interval
ci_volum = ci_volum + x_left_volum + x_right_volum
}
# idea 2 - h-line
density_G = density(G)
density_y = density_G$y
density_x = density_G$x
density_df = data.frame(nr = 1:length(density_x),
density_x = density_x,
density_y = density_y)
density_df_ordered = density_df[order(density_y, decreasing = TRUE),]
density_df_ordered$cumsum_y = cumsum(density_df_ordered$density_y)
density_df_ordered$cumsum_y_proportional_percent = density_df_ordered$cumsum_y/sum(density_y)*100
density_df_ordered$in_ci = density_df_ordered$cumsum_y_proportional_percent <= 95
#data frame with just true values
density_df_ordered_trueci = density_df_ordered[(density_df_ordered$in_ci == TRUE),]
HPD = density_df_ordered_trueci[nrow(density_df_ordered_trueci),]
ggplot(data = plot_data2.b, aes(x = G)) +
ggtitle("95% Highest Posterior Density interval for G") +
geom_density(alpha=.2, fill="#FF6666") +
geom_hline(aes(yintercept = HPD$density_y)) +
geom_text(aes(label ="95% HPD interval", x =  0.45, y = HPD$density_y+0.2),size = 3 )
# given values
degrees = c(40, 303, 326, 285, 296, 314, 20, 308, 299, 296)
n_degrees = length(degrees)
radians = c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
n_radians = length(radians)
mu_3a = 2.39
# grid of k values
k = seq(from = 0.1,to = 8, by = 0.01) # k>0
# --- theoreticle value
# calculate tau with given formula
tau = function(y,mu = 3.5){
n = length(y)
result = sum((log(y)-mu)^2)/n
return(result)
}
tau_2 = tau(observations)
# theoreticle mean
theoreticle_mean = n_observations * tau_2/(n_observations-2)
# theoreticle var
theoreticle_var = 2 * n_observations^2 * tau_2^2 / ((n_observations -2)^2 * (n_observations - 4))
# calcualte the posterior
# version 1
result_3a = exp(k*sum(cos(radians-mu_3a))-k)/besselI(x = k, nu=0)^n_radians
# version 2
#result_3a = exp(k*(sum(cos(radians-mu_3a))-1))/besselI(x = k, nu=0)^n_radians
# create plot data
plot_data3.a = data.frame("k" = k,
"posterior" = result_3a)
# histogram
# ggplot(data = plot_data3.a, aes(x=result_3a_v2)) +
#   geom_histogram()
plot_3a = ggplot(data = plot_data3.a, aes(x=k, y=result_3a)) +
geom_line() +
ylab("Posterior value") + ggtitle(TeX("Posterior distribution of $\\kappa$")) +
xlab(TeX("Grid of $\\kappa$ values"))
# find the mode
#k_max = max(result_3a)
k_max_index = which.max(result_3a)
k_max = result_3a[k_max_index]
plot_3a + geom_vline(aes(xintercept = (k_max_index*0.01 + 0.01)))
# create plot data
plot_data3.a = data.frame("k" = k,
"posterior" = result_3a)
# histogram
# ggplot(data = plot_data3.a, aes(x=result_3a_v2)) +
#   geom_histogram()
plot_3a = ggplot(data = plot_data3.a, aes(x=k, y=result_3a)) +
geom_line() +
ylab("Posterior value") + ggtitle(TeX("Posterior distribution of $\\kappa$")) +
xlab(TeX("Grid of $\\kappa$ values"))
# find the mode
#k_max = max(result_3a)
k_max_index = which.max(result_3a)
plot_3a + geom_vline(aes(xintercept = k[k_max_index]))
rm(list=ls())
# libraries for this lab
library(ggplot2)
library(gridExtra)
#install.packages('latex2exp')
library(latex2exp)
#install.packages("HDInterval")
library(HDInterval)
library(coda)
# clean environment
rm(list=ls())
# calcualte true beta mean and variacne
# initialize given values
alpha0 = 2
beta0 = 2
n = 20
s = 14
f = n - s
alpha_new = alpha0 + s
beta_new = beta0 + f
# calculate the true mean and standard deviation
true_mean = alpha_new/(alpha_new + beta_new)
true_var = (alpha_new*beta_new) / ((alpha_new + beta_new)^2 * (alpha_new + beta_new +1))
true_sd = sqrt(true_var)
# calculate how the mean changes with increasing number of n - until 10000 values
set.seed(12345)
iterations = 1:1000
mean_of_n = c()
for (i in 1:length(iterations)) {
mean_of_n[i] = mean(rbeta(n = i, shape1 = alpha_new, shape2 = beta_new))
}
# calculate how the sd changes with increasing number of n
sd_of_n = c()
for (i in 1:length(iterations)) {
sd_of_n[i] = sd(rbeta(n = i, shape1 = alpha_new, shape2 = beta_new))
}
# create plot data
plot_data1.a = data.frame(x = iterations,
true_mean = true_mean,
true_sd = true_sd)
# create converges plot for mean and sd
mean_converges = ggplot(data = plot_data1.a, aes(x = plot_data1.a$x)) +
geom_point(aes(x = x, y = mean_of_n, colour = "Samples")) +
geom_hline(aes(yintercept = true_mean, colour = "True mean")) +
ggtitle("mean converges to the true values") + xlab("n") + ylab("y")
sd_converges = ggplot(data = plot_data1.a, aes(x = plot_data1.a$x)) +
geom_point(aes(x = x, y = sd_of_n, colour = "Samples"))+
geom_hline(aes(yintercept = true_sd,colour = "True sd")) +
ggtitle("standard deviation converges to the true values") + xlab("n") + ylab("y")
grid.arrange(mean_converges, sd_converges, nrow = 2)
set.seed(12345)
# simulation to compute the posterior probability - of beta theata < 0.4
nDraws_b = 10000
sample_b = rbeta(n = nDraws_b, shape1 = 16, shape2 = 8)
# if value in sample is smaler than 0, than 1 else 0
sample_b_binary = ifelse(sample_b < 0.4, 1, 0)
prob_sample_b = sum(sample_b_binary)/nDraws_b
# exact value theta < 0.4
exact_value_1b  = pbeta(q = 0.4, shape1 = alpha_new, shape2 = beta_new)
exact_value_1b = round(exact_value_1b, 4)
# result table
result_1b_data = data.frame("Expected value" = exact_value_1b,
"Simulated vaule" = prob_sample_b)
knitr::kable(result_1b_data)
set.seed(12345)
nDraws_1c = 10000
sample_1c = rbeta(n = nDraws_b, shape1 = 16, shape2 = 8)
log_odds = log(sample_1c/(1-sample_1c))
# Visualization
# Histogram + Density
# basic plot example
# hist(log_odds, probability = TRUE)
# lines(density(log_odds)) # run all lines at the same time to create the plot
# create ggplot data
plot_data_1c = data.frame("Draw" = 1:nDraws_1c,
"log-odds" = log_odds)
ggplot(data = plot_data_1c, aes(x=log.odds)) +
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666") +
ggtitle("Histogram of log odds")
# given values
observations = c(14, 25, 45, 25, 30, 33, 19, 50, 34, 67)
n_observations = length(observations)
nDraws_2a = 10000
mu = 3.5
# --- theoreticle value
# calculate tau with given formula
tau = function(y,mu = 3.5){
n = length(y)
result = sum((log(y)-mu)^2)/n
return(result)
}
tau_2 = tau(observations)
# theoreticle mean
theoreticle_mean = n_observations * tau_2/(n_observations-2)
# theoreticle var
theoreticle_var = 2 * n_observations^2 * tau_2^2 / ((n_observations -2)^2 * (n_observations - 4))
# --- simulate values from rchisq with formula in lecture 3
set.seed(12345)
nDraws_2b = 10000
computed_variance = c()
for (i in 1:nDraws_2b) {
X = rchisq(1, n_observations)
computed_variance[i] =  (n_observations) * tau_2 / X
}
# --- simulate values by LaplacesDemon
val <- LaplacesDemon::rinvchisq(nDraws_2b,df=10,tau_2)
data_2a = data.frame(computed_variance, val)
p2a1=ggplot(data_2a,aes(x=computed_variance))+
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins = 30)+
geom_density(alpha=.2, fill="#FF6666") +
ggtitle("Histogram of sigma^2 from rchisq")+
scale_x_continuous(limits = c(0,1))
p2a2=ggplot(data_2a,aes(x=val))+
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins = 30)+
geom_density(alpha=.2, fill="#FF6666") +
ggtitle("Histogram of sigma^2 by LaplacesDemon")+
scale_x_continuous(limits = c(0,1))
grid.arrange(p2a1,p2a2, nrow = 2)
result_2a_data = data.frame("theoretical value" = c(theoreticle_mean,theoreticle_var),
"simulated rchisq" = c(simulated_mean, simulated_var),
"simulated rinvchisq" = c(mean(val),var(val)))
result_2a_data = data.frame("theoretical value" = c(theoreticle_mean,theoreticle_var),
"simulated rchisq" = c(mean(computed_variance), var(computed_variance)),
"simulated rinvchisq" = c(mean(val),var(val)))
rownames(result_2a_data) = c("mean", "variance")
knitr::kable(t(result_2a_data))
?quantile
quantile(G, probs = c(a,b))
# Gini coefficient G
# phi(z) - CDF for standard normal distribution - mu = 0, unit variance
# posterior drawn in a - computed_variance
# compute  posterior distribution of the Gini coefficient
G = 2 * pnorm(sqrt(computed_variance)/sqrt(2), mean = 0, sd = 1) -1
# create histogramm
#hist(G)
# plot data
plot_data2.b = data.frame("G" = G,
"nr" = 1:length(G))
# Histogram
ggplot(data = plot_data2.b,aes(x=G)) +
ggtitle("Histogram of the posterior distribution of the Gini coefficient") +
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666")+
xlim(c(0,1))
# Method 1:
# calculate the 95% credible(confidence) interval
a =0.025
b = 0.975
CI_0025 = quantile(G, probs = c(a,b))[1]
CI_095 = quantile(G, probs = c(a,b))[2]
# plot density
ggplot(data = plot_data2.b, aes(x = G)) +
ggtitle("95% credible interval of G") +
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept = CI_095)) +
geom_vline(aes(xintercept = CI_0025))+
geom_text(aes(label ="97.5 % interval", x =  CI_095 + 0.05, y = 7.5),size = 3 )+
geom_text(aes(label ="2.5 % interval", x =  CI_0025 -0.025, y = 7.5),size = 3 )
quantile(G, probs = c(a,b))
?HDInterval
hdi(G)
ggplot(data = plot_data2.b, aes(x = G)) +
ggtitle("95% Highest Posterior Density interval for G") +
geom_density(alpha=.2, fill="#FF6666") +
geom_hline(aes(yintercept = c(0.1578584, 0.3871752 ))) +
# geom_hline(aes(yintercept = HPD$density_y)) +
geom_text(aes(label ="95% HPD interval", x =  0.45, y = HPD$density_y+0.2),size = 3 )
HPD
# Method 2:
# Highest Posterior Density (HPD)
# idea 1 - thinking problem it has to be h-line
density_G = density(G)
density_y = density_G$y
density_x = density_G$x
density_df = data.frame(density_x = density_x,
density_y = density_y)
density_y_sum = sum(density_y)
density_y_max =max(density_y)
density_y_max_index = which.max(density_y)
density_y[density_y_max_index]/density_y_sum*100
ci_95 = 91
ci_volum_start = density_y[density_y_max_index]/density_y_sum*100 # volumen at the higest point
ci_volum = ci_volum_start
x_left = (density_y_max_index-1):1
x_right = (density_y_max_index+1):length(density_y)
x_left_point = (density_y_max_index-1)
x_right_point = (density_y_max_index+1)
x_left_volum = 0
x_right_volum = 0
while(ci_volum <= ci_95) {
# calculate the volumen to the left and the right
x_left_volum = density_y[x_left_point]/density_y_sum*100
x_right_volum = density_y[x_right_point]/density_y_sum*100
# move the point to the left and the right
x_left_point = x_left_point -1 # move to the left
x_right_point = x_right_point +1 # move to the right
# update the confidence interval
ci_volum = ci_volum + x_left_volum + x_right_volum
}
# idea 2 - h-line
density_G = density(G)
density_y = density_G$y
density_x = density_G$x
density_df = data.frame(nr = 1:length(density_x),
density_x = density_x,
density_y = density_y)
density_df_ordered = density_df[order(density_y, decreasing = TRUE),]
density_df_ordered$cumsum_y = cumsum(density_df_ordered$density_y)
density_df_ordered$cumsum_y_proportional_percent = density_df_ordered$cumsum_y/sum(density_y)*100
density_df_ordered$in_ci = density_df_ordered$cumsum_y_proportional_percent <= 95
#data frame with just true values
density_df_ordered_trueci = density_df_ordered[(density_df_ordered$in_ci == TRUE),]
HPD = density_df_ordered_trueci[nrow(density_df_ordered_trueci),]
HPD = density_df_ordered_trueci[nrow(density_df_ordered_trueci),]
HPD
ggplot(data = plot_data2.b, aes(x = G)) +
ggtitle("95% Highest Posterior Density interval for G") +
geom_density(alpha=.2, fill="#FF6666") +
geom_hline(aes(xintercept = 0.1578584)) +
# geom_hline(aes(yintercept = HPD$density_y)) +
geom_text(aes(label ="95% HPD interval", x =  0.45, y = HPD$density_y+0.2),size = 3 )
ggplot(data = plot_data2.b, aes(x = G)) +
ggtitle("95% Highest Posterior Density interval for G") +
geom_density(alpha=.2, fill="#FF6666") +
geom_hline(aes(yintercept = 0.1578584)) +
# geom_hline(aes(yintercept = HPD$density_y)) +
geom_text(aes(label ="95% HPD interval", x =  0.45, y = HPD$density_y+0.2),size = 3 )
ggplot(data = plot_data2.b, aes(x = G)) +
ggtitle("95% Highest Posterior Density interval for G") +
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept = 0.1578584)) +
# geom_hline(aes(yintercept = HPD$density_y)) +
geom_text(aes(label ="95% HPD interval", x =  0.45, y = HPD$density_y+0.2),size = 3 )
ggplot(data = plot_data2.b, aes(x = G)) +
ggtitle("95% Highest Posterior Density interval for G") +
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept = 0.1578584)) +
geom_hline(aes(yintercept = HPD$density_y)) +
geom_text(aes(label ="95% HPD interval", x =  0.45, y = HPD$density_y+0.2),size = 3 )
density(G)
a=density(G)
a
G
x_vals = hdi(G)
x_vals
x_vals = hdi(G)
ggplot(data = plot_data2.b, aes(x = G)) +
ggtitle("95% Highest Posterior Density interval for G") +
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept = 0.1578584)) +
geom_vline(aes(xintercept = 0.3871752)) +
geom_hline(aes(yintercept = HPD$density_y)) +
geom_text(aes(label ="95% HPD interval", x =  0.45, y = HPD$density_y+0.2),size = 3 )
x_vals = hdi(G)
ggplot(data = plot_data2.b, aes(x = G)) +
ggtitle("95% Highest Posterior Density interval for G") +
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept = x_vals[1])) +
geom_vline(aes(xintercept = x_vals[2])) +
geom_hline(aes(yintercept = HPD$density_y)) +
geom_text(aes(label ="95% HPD interval", x =  0.45, y = HPD$density_y+0.2),size = 3 )
plot(G)
hist(G)
# create plot data
plot_data3.a = data.frame("k" = k,
"posterior" = result_3a)
# given values
degrees = c(40, 303, 326, 285, 296, 314, 20, 308, 299, 296)
n_degrees = length(degrees)
radians = c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
n_radians = length(radians)
mu_3a = 2.39
# grid of k values
k = seq(from = 0.1,to = 8, by = 0.01) # k>0
# calcualte the posterior
result_3a = exp(k*sum(cos(radians-mu_3a))-k)/besselI(x = k, nu=0)^n_radians
# create plot data
plot_data3.a = data.frame("k" = k,
"posterior" = result_3a)
# histogram
# ggplot(data = plot_data3.a, aes(x=result_3a_v2)) +
#   geom_histogram()
plot_3a = ggplot(data = plot_data3.a, aes(x=k, y=result_3a)) +
geom_line() +
ylab("Posterior value") + ggtitle(TeX("Posterior distribution of $\\kappa$")) +
xlab(TeX("Grid of $\\kappa$ values"))
# find the mode
#k_max = max(result_3a)
k_max_index = which.max(result_3a)
plot_3a + geom_vline(aes(xintercept = k[k_max_index]))
cat("posterior mode :",max(result_3a))
# create plot data
plot_data3.a = data.frame("k" = k,
"posterior" = result_3a)
# histogram
# ggplot(data = plot_data3.a, aes(x=result_3a_v2)) +
#   geom_histogram()
plot_3a = ggplot(data = plot_data3.a, aes(x=k, y=result_3a)) +
geom_line() +
ylab("Posterior value") + ggtitle(TeX("Posterior distribution of $\\kappa$")) +
xlab(TeX("Grid of $\\kappa$ values"))
# find the mode
#k_max = max(result_3a)
k_max_index = which.max(result_3a)
plot_3a + geom_vline(aes(xintercept = k[k_max_index]))
cat("posterior mode :",k[k_max_index])
