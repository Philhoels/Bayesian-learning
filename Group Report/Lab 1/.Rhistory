knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
# libraries for this lab
library(ggplot2)
library(gridExtra)
#install.packages('latex2exp')
library(latex2exp)
#install.packages("HDInterval")
library(HDInterval)
library(coda)
# clean environment
rm(list=ls())
# calcualte true beta mean and variacne
# initialize given values
alpha0 = 2
beta0 = 2
n = 20
s = 14
f = n - s
alpha_new = alpha0 + s
beta_new = beta0 + f
# calculate the true mean and standard deviation
true_mean = alpha_new/(alpha_new + beta_new)
true_var = (alpha_new*beta_new) / ((alpha_new + beta_new)^2 * (alpha_new + beta_new +1))
true_sd = sqrt(true_var)
# calculate how the mean changes with increasing number of n - until 10000 values
set.seed(123456)
iterations = 1:1000
mean_of_n = c()
for (i in 1:length(iterations)) {
mean_of_n[i] = mean(rbeta(n = i, shape1 = alpha_new, shape2 = beta_new))
}
# calculate how the sd changes with increasing number of n
sd_of_n = c()
for (i in 1:length(iterations)) {
sd_of_n[i] = sd(rbeta(n = i, shape1 = alpha_new, shape2 = beta_new))
}
# create plot data
plot_data1.a = data.frame(x = iterations,
true_mean = true_mean,
true_sd = true_sd)
# create converges plot for mean and sd
mean_converges = ggplot(data = plot_data1.a, aes(x = plot_data1.a$x)) +
geom_point(aes(x = x, y = mean_of_n, colour = "Samples")) +
geom_hline(aes(yintercept = true_mean, colour = "True mean")) +
ggtitle("mean converges to the true values") + xlab("n") + ylab("y")
sd_converges = ggplot(data = plot_data1.a, aes(x = plot_data1.a$x)) +
geom_point(aes(x = x, y = sd_of_n, colour = "Samples"))+
geom_hline(aes(yintercept = true_sd,colour = "True sd")) +
ggtitle("standard deviation converges to the true values") + xlab("n") + ylab("y")
grid.arrange(mean_converges, sd_converges, nrow = 2)
set.seed(123456)
# simulation to compute the posterior probability - of beta theata < 0.4
nDraws_b = 10000
sample_b = rbeta(n = nDraws_b, shape1 = 16, shape2 = 8)
# if value in sample is smaler than 0, than 1 else 0
sample_b_binary = ifelse(sample_b < 0.4, 1, 0)
prob_sample_b = sum(sample_b_binary)/nDraws_b
# exact value theta < 0.4
exact_value_1b  = pbeta(q = 0.4, shape1 = alpha_new, shape2 = beta_new)
exact_value_1b = round(exact_value_1b, 4)
# result table
result_1b_data = data.frame("Expected value" = exact_value_1b,
"Simulated vaule" = prob_sample_b)
knitr::kable(result_1b_data)
set.seed(12345)
nDraws_1c = 10000
sample_1c = rbeta(n = nDraws_b, shape1 = 16, shape2 = 8)
log_odds = log(sample_1c/(1-sample_1c))
# Visualization
# Histogram + Density
# basic plot example
# hist(log_odds, probability = TRUE)
# lines(density(log_odds)) # run all lines at the same time to create the plot
# create ggplot data
plot_data_1c = data.frame("Draw" = 1:nDraws_1c,
"log-odds" = log_odds)
ggplot(data = plot_data_1c, aes(x=log.odds)) +
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins=30)+
geom_density(alpha=.2, fill="#FF6666") +
ggtitle("Histogram of log odds")
# given values
observations = c(14, 25, 45, 25, 30, 33, 19, 50, 34, 67)
n_observations = length(observations)
nDraws_2a = 10000
mu = 3.5
# --- theoreticle value
# calculate tau with given formula
tau = function(y,mu = 3.5){
n = length(y)
result = sum((log(y)-mu)^2)/n
return(result)
}
tau_2 = tau(observations)
# theoreticle mean
theoreticle_mean = n_observations * tau_2/(n_observations-2)
# theoreticle var
theoreticle_var = 2 * n_observations^2 * tau_2^2 /
((n_observations -2)^2 * (n_observations - 4))
# --- simulate values from rchisq with formula in lecture 3
set.seed(12345)
nDraws_2b = 10000
computed_variance = c()
for (i in 1:nDraws_2b) {
X = rchisq(1, n_observations)
computed_variance[i] =  (n_observations) * tau_2 / X
}
# --- simulate values by LaplacesDemon
val <- LaplacesDemon::rinvchisq(nDraws_2b,df=10,tau_2)
data_2a = data.frame(computed_variance, val)
p2a1=ggplot(data_2a,aes(x=computed_variance))+
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins = 30)+
geom_density(alpha=.2, fill="#FF6666") +
ggtitle("Histogram of sigma^2 from rchisq")+
scale_x_continuous(limits = c(0,1))
p2a2=ggplot(data_2a,aes(x=val))+
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins = 30)+
geom_density(alpha=.2, fill="#FF6666") +
ggtitle("Histogram of sigma^2 by LaplacesDemon")+
scale_x_continuous(limits = c(0,1))
grid.arrange(p2a1,p2a2, nrow = 2)
# --- simulate values from rchisq with formula in lecture 3
set.seed(12345)
nDraws_2b = 10000
computed_variance = c()
for (i in 1:nDraws_2b) {
X = rchisq(1, n_observations)
computed_variance[i] =  (n_observations) * tau_2 / X
}
# --- simulate values by LaplacesDemon
# val <- LaplacesDemon::rinvchisq(nDraws_2b,df=10,tau_2)
val <- LaplacesDemon::dinvchisq(seq(0,2.5,0.01),df=10,tau_2)
?LaplacesDemon::dinvchisq
# --- simulate values from rchisq with formula in lecture 3
set.seed(12345)
nDraws_2b = 10000
computed_variance = c()
for (i in 1:nDraws_2b) {
X = rchisq(1, n_observations)
computed_variance[i] =  (n_observations) * tau_2 / X
}
# --- simulate values by LaplacesDemon
# val <- LaplacesDemon::rinvchisq(nDraws_2b,df=10,tau_2)
val <- LaplacesDemon::dinvchisq(seq(0,2.5,0.01),df=10)
# --- simulate values from rchisq with formula in lecture 3
set.seed(12345)
nDraws_2b = 10000
computed_variance = c()
for (i in 1:nDraws_2b) {
X = rchisq(1, n_observations)
computed_variance[i] =  (n_observations) * tau_2 / X
}
# --- simulate values by LaplacesDemon
# val <- LaplacesDemon::rinvchisq(nDraws_2b,df=10,tau_2)
val <- LaplacesDemon::dinvchisq(seq(0.001,2.5,0.001),df=10,tau_2)
data_2a = data.frame(computed_variance, val)
p2a1=ggplot(data_2a,aes(x=computed_variance))+
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins = 30)+
geom_density(alpha=.2, fill="#FF6666") +
ggtitle("Histogram of sigma^2 from rchisq")+
scale_x_continuous(limits = c(0,1))
p2a2=ggplot(data_2a,aes(x=val))+
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins = 30)+
geom_density(alpha=.2, fill="#FF6666") +
ggtitle("Histogram of sigma^2 by LaplacesDemon")+
scale_x_continuous(limits = c(0,1))
grid.arrange(p2a1,p2a2, nrow = 2)
# --- simulate values from rchisq with formula in lecture 3
set.seed(12345)
nDraws_2b = 10000
computed_variance = c()
for (i in 1:nDraws_2b) {
X = rchisq(1, n_observations)
computed_variance[i] =  (n_observations) * tau_2 / X
}
# --- simulate values by LaplacesDemon
# val <- LaplacesDemon::rinvchisq(nDraws_2b,df=10,tau_2)
val <- LaplacesDemon::dinvchisq(seq(0.001,2.5,0.001),df=10)
data_2a = data.frame(computed_variance, val)
p2a1=ggplot(data_2a,aes(x=computed_variance))+
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins = 30)+
geom_density(alpha=.2, fill="#FF6666") +
ggtitle("Histogram of sigma^2 from rchisq")+
scale_x_continuous(limits = c(0,1))
p2a2=ggplot(data_2a,aes(x=val))+
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins = 30)+
geom_density(alpha=.2, fill="#FF6666") +
ggtitle("Histogram of sigma^2 by LaplacesDemon")+
scale_x_continuous(limits = c(0,1))
grid.arrange(p2a1,p2a2, nrow = 2)
# --- simulate values from rchisq with formula in lecture 3
set.seed(12345)
nDraws_2b = 10000
computed_variance = c()
for (i in 1:nDraws_2b) {
X = rchisq(1, n_observations)
computed_variance[i] =  (n_observations) * tau_2 / X
}
computed_variance <- scale(computed_variance)
# --- simulate values by LaplacesDemon
# val <- LaplacesDemon::rinvchisq(nDraws_2b,df=10,tau_2)
val <- LaplacesDemon::dinvchisq(seq(0.001,2.5,0.001),df=10)
data_2a = data.frame(computed_variance, val)
p2a1=ggplot(data_2a,aes(x=computed_variance))+
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins = 30)+
geom_density(alpha=.2, fill="#FF6666") +
ggtitle("Histogram of sigma^2 from rchisq")+
scale_x_continuous(limits = c(0,1))
p2a2=ggplot(data_2a,aes(x=val))+
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins = 30)+
geom_density(alpha=.2, fill="#FF6666") +
ggtitle("Histogram of sigma^2 by LaplacesDemon")+
scale_x_continuous(limits = c(0,1))
grid.arrange(p2a1,p2a2, nrow = 2)
data_2a = data.frame(computed_variance, val)
p2a1=ggplot(data_2a,aes(x=computed_variance))+
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins = 30)+
geom_density(alpha=.2, fill="#FF6666") +
ggtitle("Histogram of sigma^2 from rchisq")
p2a2=ggplot(data_2a,aes(x=val))+
geom_histogram(aes(y=..density..),
colour="black",
fill="white",
bins = 30)+
geom_density(alpha=.2, fill="#FF6666") +
ggtitle("Histogram of sigma^2 by LaplacesDemon")
grid.arrange(p2a1,p2a2, nrow = 2)
