}
c <- 10
RW <- RWMSampler(LogPostFunc = LogPostLogistic,
num = 100,
c = c,
y = y, X = X, mu = postMode, Sigma = postCov)
set.seed(12345)
RWMSampler <- function(LogPostFunc, num, c,...){
draws <- data.frame(matrix(nrow = num, ncol = 9))
draws[1,] <- mvrnorm(n = 1, postMode, c*postCov)
count <- 1
i <- 0
while(count<num) {
i <- i+1
theta.old <- as.numeric(draws[count,])
theta.new <- mvrnorm(n = 1, theta.old, c*postCov)
u <- runif(1,0,1)
left  <- LogPostFunc(theta.new,...)
right <- LogPostFunc(theta.old,...)
a <- min(1, exp(left-right))
if(u<a){
count <- count + 1
draws[count,] <- theta.new
}
}
cat("acceptance probability: ",num/i)
return(draws)
}
c <- 10
RW <- RWMSampler(LogPostFunc = LogPostLogistic,
num = 30,
c = c,
y = y, X = X, mu = postMode, Sigma = postCov)
set.seed(12345)
RWMSampler <- function(LogPostFunc, num, c,...){
# In random walk, all draws are from sample proposal|
draws <- data.frame(matrix(nrow = num, ncol = 9))
draws[1,] <- mvrnorm(n = 1, postMode, c*postCov)
count <- 1
i <- 0
while(count<num) {
i <- i+1
theta.old <- as.numeric(draws[count,])
theta.new <- mvrnorm(n = 1, theta.old, c*postCov)
u <- runif(1,0,1)
left  <- LogPostFunc(theta.new,...)
right <- LogPostFunc(theta.old,...)
a <- min(1, exp(left-right))
if(u<a){
count <- count + 1
draws[count,] <- theta.new
}
}
cat("acceptance probability: ",num/i)
return(draws)
}
c <- 1
RW <- RWMSampler(LogPostFunc = LogPostLogistic,
num = 30,
c = c,
y = y, X = X, mu = postMode, Sigma = postCov)
set.seed(12345)
RWMSampler <- function(LogPostFunc, num, c,...){
# In random walk, all draws are from sample proposal|
draws <- data.frame(matrix(nrow = num, ncol = 9))
draws[1,] <- mvrnorm(n = 1, postMode, c*postCov)
count <- 1
i <- 0
while(count<num) {
i <- i+1
theta.old <- as.numeric(draws[count,])
theta.new <- mvrnorm(n = 1, theta.old, c*postCov)
u <- runif(1,0,1)
left  <- LogPostFunc(theta.new,...)
right <- LogPostFunc(theta.old,...)
a <- min(1, exp(left-right))
if(u<a){
count <- count + 1
draws[count,] <- theta.new
}
}
cat("acceptance probability: ",num/i)
return(draws)
}
c <- 0.1
RW <- RWMSampler(LogPostFunc = LogPostLogistic,
num = 30,
c = c,
y = y, X = X, mu = postMode, Sigma = postCov)
set.seed(12345)
RWMSampler <- function(LogPostFunc, num, c,...){
# In random walk, all draws are from sample proposal|
draws <- data.frame(matrix(nrow = num, ncol = 9))
draws[1,] <- mvrnorm(n = 1, postMode, c*postCov)
count <- 1
i <- 0
while(count<num) {
i <- i+1
theta.old <- as.numeric(draws[count,])
theta.new <- mvrnorm(n = 1, theta.old, c*postCov)
u <- runif(1,0,1)
left  <- LogPostFunc(theta.new,...)
right <- LogPostFunc(theta.old,...)
a <- min(1, exp(left-right))
if(u<a){
count <- count + 1
draws[count,] <- theta.new
}
}
cat("acceptance probability: ",num/i)
return(draws)
}
c <- 0.4
RW <- RWMSampler(LogPostFunc = LogPostLogistic,
num = 30,
c = c,
y = y, X = X, mu = postMode, Sigma = postCov)
set.seed(12345)
RWMSampler <- function(LogPostFunc, num, c,...){
# In random walk, all draws are from sample proposal|
draws <- data.frame(matrix(nrow = num, ncol = 9))
draws[1,] <- mvrnorm(n = 1, postMode, c*postCov)
count <- 1
i <- 0
while(count<num) {
i <- i+1
theta.old <- as.numeric(draws[count,])
theta.new <- mvrnorm(n = 1, theta.old, c*postCov)
u <- runif(1,0,1)
left  <- LogPostFunc(theta.new,...)
right <- LogPostFunc(theta.old,...)
a <- min(1, exp(left-right))
if(u<a){
count <- count + 1
draws[count,] <- theta.new
}
}
cat("acceptance probability: ",num/i)
return(draws)
}
c <- 0.4
num <- 30
RW <- RWMSampler(LogPostFunc = LogPostLogistic,
num = nun,
c = c,
y = y, X = X, mu = postMode, Sigma = postCov)
RW <- RWMSampler(LogPostFunc = LogPostLogistic,
num = num,
c = c,
y = y, X = X, mu = postMode, Sigma = postCov)
data.2c <- cbind(RW, 1:num)
colnames(RW)
colnames(data.2c)
index <- 1:num
data.2c <- cbind(RW, index)
ggplot(RW, aes(x=index, y=X1)) +
geom_line()
index <- 1:num
data.2c <- cbind(RW, index)
cnames <- colnames(data.2c)[,1:9]
colnames(data.2c)
index <- 1:num
data.2c <- cbind(RW, index)
cnames <- colnames(data.2c)[1:9]
plots <- sapply(cnames, function(cname){
ggplot(data.2c, aes_string(x=index, y=cname)) +
geom_line()
})
plot(gridExtra::arrangeGrob(plots, nrow = 3))
data.2c
index <- 1:num
data.2c <- cbind(RW, index)
cnames <- colnames(data.2c)[1:9]
plots <- lapply(cnames, function(cname){
ggplot(data.2c, aes_string(x=index, y=cname)) +
geom_line()
})
plot(gridExtra::arrangeGrob(plots, nrow = 3))
cnames
ggplot(data.2c, aes_string(x=index, y=X1)) +
geom_line()
ggplot(data.2c, aes_string(x=index, y="X1")) +
geom_line()
?data.frame
colnames(X)
set.seed(12345)
RWMSampler <- function(LogPostFunc, num, c,...){
# In random walk, all draws are from sample proposal|
draws <- data.frame(matrix(nrow = num, ncol = 9))
colnames(draws) <- colnames(X)
draws[1,] <- mvrnorm(n = 1, postMode, c*postCov)
count <- 1
i <- 0
while(count<num) {
i <- i+1
theta.old <- as.numeric(draws[count,])
theta.new <- mvrnorm(n = 1, theta.old, c*postCov)
u <- runif(1,0,1)
left  <- LogPostFunc(theta.new,...)
right <- LogPostFunc(theta.old,...)
a <- min(1, exp(left-right))
if(u<a){
count <- count + 1
draws[count,] <- theta.new
}
}
cat("acceptance probability: ",num/i)
return(draws)
}
c <- 0.4
num <- 30
RW <- RWMSampler(LogPostFunc = LogPostLogistic,
num = num,
c = c,
y = y, X = X, mu = postMode, Sigma = postCov)
draws
RW
index <- 1:num
data.2c <- cbind(RW, index)
cnames <- colnames(data.2c)[1:9]
plots <- lapply(cnames, function(cname){
ggplot(data.2c, aes_string(x=index, y=cname)) +
geom_line()
})
plot(gridExtra::arrangeGrob(plots, nrow = 3))
ggplot(data.2c, aes(x=index, y=const)) +
geom_line()
CNAMES
cnames
ggplot(data.2c, aes(x=index, y=Const)) +
geom_line()
index <- 1:num
data.2c <- cbind(RW, index)
cnames <- colnames(data.2c)[1:9]
f <- function(cname){
ggplot(data.2c, aes_string(x=index, y=cname)) +
geom_line()
}
plot(gridExtra::arrangeGrob(lapply(cnames, f), nrow = 3))
index <- 1:num
data.2c <- cbind(RW, index)
cnames <- colnames(data.2c)[1:9]
f <- function(cname){
ggplot(data.2c, aes(x=index)) +
geom_line(aes_string(y=cname))
}
plot(gridExtra::arrangeGrob(lapply(cnames, f), nrow = 3))
index <- 1:num
data.2c <- cbind(RW, index)
cnames <- colnames(data.2c)[2:9]
f <- function(cname){
ggplot(data.2c, aes(x=index)) +
geom_line(aes_string(y=cname))
}
plot(gridExtra::arrangeGrob(lapply(cnames, f), nrow = 3))
ggplot(data.2c, aes(x=index)) +
geom_line(aes(y=Const))
Index <- 1:num
data.2c <- cbind(RW, Index)
cnames <- colnames(data.2c)[2:9]
f <- function(cname){
ggplot(data.2c, aes_string(x=index, y=cname)) +
geom_line()
}
gridExtra::arrangeGrob(lapply(cnames, f), nrow = 3)
Index <- 1:num
data.2c <- cbind(RW, Index)
cnames <- colnames(data.2c)[2:9]
f <- function(cname){
ggplot(data.2c, aes_string(x=index, y=cname)) +
geom_line()
}
gridExtra::arrangeGrob(lapply(cnames, f))
Index <- 1:num
data.2c <- cbind(RW, Index)
cnames <- colnames(data.2c)[2:9]
f <- function(cname){
ggplot(data.2c, aes_string(x=index)) +
geom_histogram()
}
gridExtra::arrangeGrob(lapply(cnames, f))
class(data.2c)
cnames
Index <- 1:num
data.2c <- cbind(RW, Index)
cnames <- colnames(data.2c)[2:9]
f <- function(cname){
ggplot(data.2c, aes_string(x=index)) +
geom_histogram()
}
arrangeGrob(lapply(cnames, f))
Index <- 1:num
data.2c <- cbind(RW, Index)
cnames <- colnames(data.2c)[2:9]
f <- function(cname){
ggplot(data.2c, aes_string(x=cname)) +
geom_histogram(aes(y = ..density..),
colour = "black",
fill   = "white",
bins   = 30) +
geom_density(alpha = .2, fill = "#FF6666")
}
plot(arrangeGrob(grobs = lapply(cnames, f)))
Index <- 1:num
data.2c <- cbind(RW, Index)
cnames <- colnames(data.2c)[1:9]
f <- function(cname){
ggplot(data.2c, aes_string(x=cname)) +
geom_histogram(aes(y = ..density..),
colour = "black",
fill   = "white",
bins   = 30) +
geom_density(alpha = .2, fill = "#FF6666")
}
plot(arrangeGrob(grobs = lapply(cnames, f)))
set.seed(12345)
RWMSampler <- function(LogPostFunc, num, c,...){
# In random walk, all draws are from sample proposal|
draws <- data.frame(matrix(nrow = num, ncol = 9))
colnames(draws) <- colnames(X)
draws[1,] <- mvrnorm(n = 1, postMode, c*postCov)
count <- 1
i <- 0
while(count<num) {
i <- i+1
theta.old <- as.numeric(draws[count,])
theta.new <- mvrnorm(n = 1, theta.old, c*postCov)
u <- runif(1,0,1)
left  <- LogPostFunc(theta.new,...)
right <- LogPostFunc(theta.old,...)
a <- min(1, exp(left-right))
if(u<a){
count <- count + 1
draws[count,] <- theta.new
}
}
cat("acceptance probability: ",num/i)
return(draws)
}
c <- 0.4
num <- 100
RW <- RWMSampler(LogPostFunc = LogPostLogistic,
num = num,
c = c,
y = y, X = X, mu = postMode, Sigma = postCov)
Index <- 1:num
data.2c <- cbind(RW, Index)
cnames <- colnames(data.2c)[1:9]
f <- function(cname){
ggplot(data.2c, aes_string(x=Index, y=cname)) +
geom_histogram(aes(y = ..density..),
colour = "black",
fill   = "white",
bins   = 30) +
geom_density(alpha = .2, fill = "#FF6666")
}
plot(arrangeGrob(grobs = lapply(cnames, f)))
Index <- 1:num
data.2c <- cbind(RW, Index)
cnames <- colnames(data.2c)[1:9]
f <- function(cname){
ggplot(data.2c, aes_string(x=Index, y=cname)) +
geom_line()
}
plot(arrangeGrob(grobs = lapply(cnames, f)))
set.seed(12345)
RWMSampler <- function(LogPostFunc, num, c,...){
# In random walk, all draws are from sample proposal|
draws <- data.frame(matrix(nrow = num, ncol = 9))
colnames(draws) <- colnames(X)
draws[1,] <- mvrnorm(n = 1, postMode, c*postCov)
count <- 1
i <- 0
while(count<num) {
i <- i+1
theta.old <- as.numeric(draws[count,])
theta.new <- mvrnorm(n = 1, theta.old, c*postCov)
u <- runif(1,0,1)
left  <- LogPostFunc(theta.new,...)
right <- LogPostFunc(theta.old,...)
a <- min(1, exp(left-right))
if(u<a){
count <- count + 1
draws[count,] <- theta.new
}
}
cat("acceptance probability: ",num/i)
return(draws)
}
c <- 0.4
num <- 500
RW <- RWMSampler(LogPostFunc = LogPostLogistic,
num = num,
c = c,
y = y, X = X, mu = postMode, Sigma = postCov)
Index <- 1:num
data.2c <- cbind(RW, Index)
cnames <- colnames(data.2c)[1:9]
f <- function(cname){
ggplot(data.2c, aes_string(x = Index, y = cname)) +
geom_line()
}
plot(arrangeGrob(grobs = lapply(cnames, f)), ncol = 2)
colMeans(RW)
Index <- 1:num
data.2c <- cbind(RW, Index)
cnames <- colnames(data.2c)[1:9]
f <- function(cname){
ggplot(data.2c, aes_string(x = Index, y = cname)) +
geom_line() +
stat_smooth()
}
plot(arrangeGrob(grobs = lapply(cnames, f)), ncol = 2)
Index <- 1:num
data.2c <- cbind(RW, Index)
cnames <- colnames(data.2c)[1:9]
f <- function(cname){
ggplot(data.2c, aes_string(x = Index, y = cname)) +
geom_line() +
stat_smooth()
}
plot(arrangeGrob(grobs = lapply(cnames, f),ncol = 2))
Index <- 1:num
data.2c <- cbind(RW, Index)
cnames <- colnames(data.2c)[1:9]
f <- function(cname){
ggplot(data.2c, aes_string(x = Index, y = cname)) +
geom_line() +
stat_smooth()
}
plot(arrangeGrob(grobs = lapply(cnames, f)))
set.seed(12345)
RWMSampler <- function(LogPostFunc, num, c,...){
# In random walk, all draws are from sample proposal|
draws <- data.frame(matrix(nrow = num, ncol = 9))
colnames(draws) <- colnames(X)
draws[1,] <- mvrnorm(n = 1, postMode, c*postCov)
count <- 1
i <- 0
while(count<num) {
i <- i+1
theta.old <- as.numeric(draws[count,])
theta.new <- mvrnorm(n = 1, theta.old, c*postCov)
u <- runif(1,0,1)
left  <- LogPostFunc(theta.new,...)
right <- LogPostFunc(theta.old,...)
a <- min(1, exp(left-right))
if(u<a){
count <- count + 1
draws[count,] <- theta.new
}
}
cat("acceptance probability: ",num/i)
return(draws)
}
c <- 0.4
num <- 1000
RW <- RWMSampler(LogPostFunc = LogPostLogistic,
num = num,
c = c,
y = y, X = X, mu = postMode, Sigma = postCov)
colMeans(RW)
Index <- 1:num
data.2c <- cbind(RW, Index)
cnames <- colnames(data.2c)[1:9]
f <- function(cname){
ggplot(data.2c, aes_string(x = Index, y = cname)) +
geom_line() +
stat_smooth()
}
plot(arrangeGrob(grobs = lapply(cnames, f)))
set.seed(12345)
RWMSampler <- function(LogPostFunc, num, c,...){
# In random walk, all draws are from sample proposal
draws <- data.frame(matrix(nrow = num, ncol = 9))
colnames(draws) <- colnames(X)
draws[1,] <- mvrnorm(n = 1, postMode, c*postCov)
count <- 1
i <- 0
while(count<num) {
i <- i+1
theta.old <- as.numeric(draws[count,])
theta.new <- mvrnorm(n = 1, theta.old, c*postCov)
u <- runif(1,0,1)
# LogPostFunc is the distribution of theta/posterior we assume
left  <- LogPostFunc(theta.new,...)
right <- LogPostFunc(theta.old,...)
a <- min(1, exp(left-right))
if(u<a){
count <- count + 1
draws[count,] <- theta.new
}
}
cat("acceptance probability: ",num/i)
return(draws)
}
c <- 0.3
num <- 1000
RW <- RWMSampler(LogPostFunc = LogPostLogistic,
num = num,
c = c,
y = y, X = X, mu = postMode, Sigma = postCov)
colMeans(RW)
Index <- 1:num
data.2c <- cbind(RW, Index)
cnames <- colnames(data.2c)[1:9]
f <- function(cname){
ggplot(data.2c, aes_string(x = Index, y = cname)) +
geom_line() +
stat_smooth()
}
plot(arrangeGrob(grobs = lapply(cnames, f)))
