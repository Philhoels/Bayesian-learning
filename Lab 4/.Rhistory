knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, out.width = "320px")
# setting
library(rstan)
library(latex2exp)
library(gridExtra)
library(ggplot2)
rm(list = ls())
set.seed(123456)
# AR(1) process
AR1 <- function(phi, n=200, mu=10, sigma2=2){
x <- c()
x[1] <- mu
for (i in 2:n) {
x[i] <- mu + phi*(x[i-1]-mu) + rnorm(1, 0, sqrt(sigma2))
}
x
}
iter <- 1:200
phis <- c(-0.9, 0, 0.9)
plot.a <- lapply(phis, function(phi){
x <- AR1(phi = phi)
title <- paste0("phi = ",phi)
data <- data.frame(iter = iter, x=x)
ggplot(data) +
geom_line(aes(x=iter, y=x)) +
ggtitle(title)
})
plot(arrangeGrob(grobs = plot.a))
set.seed(1111)
x <- AR1(phi=0.3)
y <- AR1(phi=0.95)
N = 200
StanModel='
data {
int<lower=0> N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
}
model {
\\ prior
mu ~ normal(0,100);
sigma2 ~ scaled_inv_chi_square(100,2);
\\ model
x[2:N] ~ normal( mu + phi*(x[1:(N-1)]-mu), sqrt(sigma2));
}'
fit1 <- stan(
model_code = StanModel,  # Stan program
data = list(N=N, x=x),    # named list of data
chains = 1,
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
refresh = 0
)
# setting
library(rstan)
library(latex2exp)
library(gridExtra)
library(ggplot2)
rm(list = ls())
set.seed(123456)
# AR(1) process
AR1 <- function(phi, n=200, mu=10, sigma2=2){
x <- c()
x[1] <- mu
for (i in 2:n) {
x[i] <- mu + phi*(x[i-1]-mu) + rnorm(1, 0, sqrt(sigma2))
}
x
}
iter <- 1:200
phis <- c(-0.9, 0, 0.9)
plot.a <- lapply(phis, function(phi){
x <- AR1(phi = phi)
title <- paste0("phi = ",phi)
data <- data.frame(iter = iter, x=x)
ggplot(data) +
geom_line(aes(x=iter, y=x)) +
ggtitle(title)
})
plot(arrangeGrob(grobs = plot.a))
set.seed(1111)
x <- AR1(phi=0.3)
y <- AR1(phi=0.95)
N = 200
StanModel='
data {
int<lower=0> N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
}
model {
\\ prior
mu ~ normal(0,100);
sigma2 ~ scaled_inv_chi_square(100,2);
\\ model
x[2:N] ~ normal( mu + phi*(x[1:(N-1)]-mu), sqrt(sigma2));
}'
fit1 <- stan(
model_code = StanModel,  # Stan program
data = list(N=N, x=x),    # named list of data
chains = 1,
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
refresh = 0
)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, out.width = "320px")
# setting
library(rstan)
library(latex2exp)
library(gridExtra)
library(ggplot2)
rm(list = ls())
set.seed(123456)
# AR(1) process
AR1 <- function(phi, n=200, mu=10, sigma2=2){
x <- c()
x[1] <- mu
for (i in 2:n) {
x[i] <- mu + phi*(x[i-1]-mu) + rnorm(1, 0, sqrt(sigma2))
}
x
}
iter <- 1:200
phis <- c(-0.9, 0, 0.9)
plot.a <- lapply(phis, function(phi){
x <- AR1(phi = phi)
title <- paste0("phi = ",phi)
data <- data.frame(iter = iter, x=x)
ggplot(data) +
geom_line(aes(x=iter, y=x)) +
ggtitle(title)
})
plot(arrangeGrob(grobs = plot.a))
set.seed(1111)
x <- AR1(phi=0.3)
y <- AR1(phi=0.95)
N = 200
StanModel='
data {
int<lower=0> N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
}
model {
mu ~ normal(0,100);
sigma2 ~ scaled_inv_chi_square(100,2);
x[2:N] ~ normal( mu + phi*(x[1:(N-1)]-mu), sqrt(sigma2));
}'
fit1 <- stan(
model_code = StanModel,  # Stan program
data = list(N=N, x=x),    # named list of data
chains = 1,
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
refresh = 0
)
set.seed(1111)
x <- AR1(phi=0.3)
y <- AR1(phi=0.95)
N = 200
StanModel='
data {
int<lower=0> N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
}
model {
\\prior
mu ~ normal(0,100);
sigma2 ~ scaled_inv_chi_square(100,2);
\\model
x[2:N] ~ normal( mu + phi*(x[1:(N-1)]-mu), sqrt(sigma2));
}'
fit1 <- stan(
model_code = StanModel,  # Stan program
data = list(N=N, x=x),    # named list of data
chains = 1,
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
refresh = 0
)
StanModel='
data {
int<lower=0> N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
}
model {
\prior
StanModel='
data {
int<lower=0> N;
vector[N] x;
}
parameters {
real mu;
real<lower=0> sigma2;
real<lower=-1, upper=1> phi;
}
model {
\\prior
mu ~ normal(0,100);
sigma2 ~ scaled_inv_chi_square(100,2);
\\model
x[2:N] ~ normal( mu + phi*(x[1:(N-1)]-mu), sqrt(sigma2));
}'
fit1 <- stan(
model_code = StanModel,  # Stan program
data = list(N=N, x=x),    # named list of data
chains = 1,
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
refresh = 0
)
